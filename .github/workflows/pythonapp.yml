name: Build and test

on: [push]

jobs:
  build:
    strategy:
        matrix:
            os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:

    - name: Checkout Code
      uses: actions/checkout@v2.3.4

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
         ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Install artisatomic
      run: |
        python -m pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Cache CMFGEN atomic data
      uses: actions/cache@v2.1.4
      id: cache-cmfgendata
      with:
          path: "atomic-data-hillier/atomic_data_15nov16.tar.gz"
          key: "atomic-data-hillier/atomic_data_15nov16.tar.gz"

    - name: Download CMFGEN atomic data
      if: steps.cache-cmfgendata.outputs.cache-hit != 'true'
      run: |
          cd atomic-data-hillier/
          curl -O http://kookaburra.phyast.pitt.edu/hillier/cmfgen_files/atomic_data_15nov16.tar.gz
          cd ..

    - name: Extract CMFGEN atomic data
      run: |
          cd atomic-data-hillier/
          tar -xzf atomic_data_15nov16.tar.gz
          rsync -av atomic_diff/ atomic/
          cd ..

    - name: Generate artis atomic data files
      run: |
        makeartisatomicfiles -output_folder test_output

    - name: tar and zip output files
      run: |
        tar -cvf artis_files.tar test_output/*
        xz -v artis_files.tar

    - name: Upload output files
      uses: actions/upload-artifact@v2
      with:
        name: artis_files
        path: |
          artis_files.tar.xz
