[build-system]
requires = [
    "psutil>=5.9.0",
    "setuptools>=68",
    "setuptools_scm[toml]>=8.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "artisatomic"
authors = [
    { name = "Luke J. Shingles", email = "luke.shingles@gmail.com" },
    { name = "ARTIS Collaboration", email = "luke.shingles@gmail.com" },
]
description = "Tools to create an atomic database for use with ARTIS."
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
license = { text = "MIT" }
dynamic = ["version"]
requires-python = ">=3.10"
readme = { file = "README.md", content-type = 'text/markdown' }
dependencies = [
    "argcomplete>=3.5.1",
    "chiantipy>=0.15.1",
    "h5py>=3.10.0",
    "numpy>=1.26.1",
    "pandas>=2.2.3",
    "polars>=1.12.0",
    "pyarrow>=18.1.0",
    "scipy>=1.11.3",
    "xopen[zstd]>=2.0.2",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "pytest>=8.3.3",
    "ruff>=0.8.3",
    "types-requests>=2.32.0.20241016",
]

[project.urls]
Repository = "https://www.github.com/artis-mcrt/artisatomic"

[project.scripts]
makeartisatomicfiles = "artisatomic:main"
makerecombratefile = "artisatomic.makerecombratefile:main"

[tool.black]
line-length = 120

[tool.mypy]
python_version = '3.13'
exclude = "(build)|(tests)"
packages = "artisatomic"
ignore_missing_imports = true
warn_unused_configs = true

[tool.pylint]
max-line-length = 120
errors-only = true

[tool.pylint.typecheck]
ignored-modules = ["extinction"]

[tool.ruff]
line-length = 120
target-version = "py310"
fix = true
show-fixes = true
extend-exclude = ["_version.py"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN001",  # missing-type-function-argument
    "ANN201",  # missing-return-type-undocumented-public-function
    "ANN204",
    "ANN003",  # missing-type-kwargs
    "ANN202",  # missing-return-type-private-function
    "ANN401",  # any-type
    "B005",    # strip-with-multi-characters
    "B007",    # loop-variable-not-used
    "C901",    # complex-structure
    "COM812",  # missing-trailing-comma
    "CPY001",  # missing-copyright-notice
    "D",
    "DOC201",  # docstring-missing-returns
    "DOC402",  # docstring-missing-yields
    "DOC501",  # docstring-missing-exception
    "E501",    # Line too long
    "E741",    # ambiguous-variable-name
    "EM101",
    "EM102",
    "ERA001",  # commented-out-code
    "F841",    # unused-variable
    "FBT",
    "FIX002",  # line contains TODO
    "ISC001",  # single-line-implicit-string-concatenation
    "N802",    # Function name should be lowercase
    "N803",    # Argument name should be lowercase
    "N806",    # non-lowercase-variable-in-function
    "N815",    # mixed-case-variable-in-class-scope
    "N816",    # mixed-case-variable-in-module-scope
    "PD002",
    "PERF203", # try-except-in-loop
    "PGH003",
    "PGH004",  # blanket-noqa
    "PLC0414", # useless-import-alias
    "PLC0415", # import-outside-toplevel
    "PLR0914", # too-many-locals
    "PLR0917", # too-many-positional
    "PLR1702", # too-many-nested-blocks
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "PLR2004", # magic-value-comparison
    "PLW0603",
    "PLW2901", # redefined-loop-name
    "PTH100",
    "PTH103",
    "PTH110",
    "PTH113",
    "PTH118",
    "PTH119",
    "PTH120",
    "PTH123",
    "PTH107",
    "PTH207",
    "PYI024",  # Use `typing.NamedTuple` instead of `collections.namedtuple`
    "RET504",
    "S101",    # Use of assert detected
    "S105",
    "S310",    # suspicious-url-open-usage
    "S311",    # suspicious-non-cryptographic-random-usage
    "S404",    # suspicious-subprocess-import
    "S603",    # subprocess-without-shell-equals-true
    "S607",    # start-process-with-partial-path
    "SIM115",
    "T201",    # print found
    "TD002",   # missing-todo-author
    "TD003",   # missing-todo-link
    "TD004",
    "TD005",
    "TRY003",
]
fixable = ["ALL"]
unfixable = [
    "COM812", # missing-trailing-comma
    "ERA001", # commented-out-code (will just delete it!)
    "F841",   # unused-variable
    "RUF100", # unused-noqa
    "SIM222", # expr-or-true
    "SIM223", # expr-and-false
    "TC005",  # empty-type-checking-block
    "F401",
]

[tool.ruff.lint.isort]
force-single-line = true
order-by-type = false

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE.txt"]

[tool.setuptools.packages.find]
namespaces = true
where = ["."]
include = ["*", "**/matplotlibrc", "**/data"]
exclude = ["tests", "**/dist", "**/lib", "**/build", "*.egg-info", "**/.*"]

[tool.setuptools_scm]
write_to = "_version.py"
local_scheme = "no-local-version"
